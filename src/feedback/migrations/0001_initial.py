# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-10-02 02:10


from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BarcodeScanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=64)),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name': 'Barcode Scanner',
                'verbose_name_plural': 'Barcode Scanner',
            },
        ),
        migrations.CreateModel(
            name='BarcodeScannEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barcode', models.PositiveIntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('scanner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.BarcodeScanner')),
            ],
            options={
                'verbose_name': 'BarcodeScannEvent',
                'verbose_name_plural': 'BarcodeScannEvents',
            },
        ),
        migrations.CreateModel(
            name='Einstellung',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('wert', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'Einstellung',
                'verbose_name_plural': 'Einstellungen',
            },
        ),
        migrations.CreateModel(
            name='Ergebnis2008',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anzahl', models.PositiveIntegerField()),
                ('v_didaktik', models.FloatField(blank=True, null=True)),
                ('v_didaktik_count', models.PositiveIntegerField(default=0)),
                ('v_organisation', models.FloatField(blank=True, null=True)),
                ('v_organisation_count', models.PositiveIntegerField(default=0)),
                ('v_praxisbezug_motivation', models.FloatField(blank=True, null=True)),
                ('v_praxisbezug_motivation_count', models.PositiveIntegerField(default=0)),
                ('v_gesamt', models.FloatField(blank=True, null=True)),
                ('v_gesamt_count', models.PositiveIntegerField(default=0)),
                ('v_feedbackpreis', models.FloatField(blank=True, null=True)),
                ('v_feedbackpreis_count', models.PositiveIntegerField(default=0)),
                ('ue_aufgaben', models.FloatField(blank=True, null=True)),
                ('ue_aufgaben_count', models.PositiveIntegerField(default=0)),
                ('ue_organisation', models.FloatField(blank=True, null=True)),
                ('ue_organisation_count', models.PositiveIntegerField(default=0)),
                ('ue_betreuung', models.FloatField(blank=True, null=True)),
                ('ue_betreuung_count', models.PositiveIntegerField(default=0)),
                ('ue_gesamt', models.FloatField(blank=True, null=True)),
                ('ue_gesamt_count', models.PositiveIntegerField(default=0)),
                ('ue_feedbackpreis', models.FloatField(blank=True, null=True)),
                ('ue_feedbackpreis_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['veranstaltung'],
                'verbose_name': 'Ergebnis 2008',
                'verbose_name_plural': 'Ergebnisse 2008',
            },
        ),
        migrations.CreateModel(
            name='Ergebnis2009',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anzahl', models.PositiveIntegerField()),
                ('v_didaktik', models.FloatField(blank=True, null=True)),
                ('v_didaktik_count', models.PositiveIntegerField(default=0)),
                ('v_organisation', models.FloatField(blank=True, null=True)),
                ('v_organisation_count', models.PositiveIntegerField(default=0)),
                ('v_praxisbezug_motivation', models.FloatField(blank=True, null=True)),
                ('v_praxisbezug_motivation_count', models.PositiveIntegerField(default=0)),
                ('v_gesamt', models.FloatField(blank=True, null=True)),
                ('v_gesamt_count', models.PositiveIntegerField(default=0)),
                ('empfehlung', models.FloatField(blank=True, null=True)),
                ('empfehlung_count', models.PositiveIntegerField(default=0)),
                ('v_feedbackpreis', models.FloatField(blank=True, null=True)),
                ('v_feedbackpreis_count', models.PositiveIntegerField(default=0)),
                ('ue_aufgaben', models.FloatField(blank=True, null=True)),
                ('ue_aufgaben_count', models.PositiveIntegerField(default=0)),
                ('ue_organisation', models.FloatField(blank=True, null=True)),
                ('ue_organisation_count', models.PositiveIntegerField(default=0)),
                ('ue_betreuung', models.FloatField(blank=True, null=True)),
                ('ue_betreuung_count', models.PositiveIntegerField(default=0)),
                ('ue_gesamt', models.FloatField(blank=True, null=True)),
                ('ue_gesamt_count', models.PositiveIntegerField(default=0)),
                ('ue_feedbackpreis', models.FloatField(blank=True, null=True)),
                ('ue_feedbackpreis_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['veranstaltung'],
                'verbose_name': 'Ergebnis 2009',
                'verbose_name_plural': 'Ergebnisse 2009',
            },
        ),
        migrations.CreateModel(
            name='Ergebnis2012',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anzahl', models.PositiveIntegerField()),
                ('v_didaktik', models.FloatField(blank=True, null=True)),
                ('v_didaktik_count', models.PositiveIntegerField(default=0)),
                ('v_organisation', models.FloatField(blank=True, null=True)),
                ('v_organisation_count', models.PositiveIntegerField(default=0)),
                ('v_praxisbezug_motivation', models.FloatField(blank=True, null=True)),
                ('v_praxisbezug_motivation_count', models.PositiveIntegerField(default=0)),
                ('v_gesamt', models.FloatField(blank=True, null=True)),
                ('v_gesamt_count', models.PositiveIntegerField(default=0)),
                ('empfehlung', models.FloatField(blank=True, null=True)),
                ('empfehlung_count', models.PositiveIntegerField(default=0)),
                ('v_feedbackpreis', models.FloatField(blank=True, null=True)),
                ('v_feedbackpreis_count', models.PositiveIntegerField(default=0)),
                ('ue_aufgaben', models.FloatField(blank=True, null=True)),
                ('ue_aufgaben_count', models.PositiveIntegerField(default=0)),
                ('ue_organisation', models.FloatField(blank=True, null=True)),
                ('ue_organisation_count', models.PositiveIntegerField(default=0)),
                ('ue_betreuung', models.FloatField(blank=True, null=True)),
                ('ue_betreuung_count', models.PositiveIntegerField(default=0)),
                ('ue_gesamt', models.FloatField(blank=True, null=True)),
                ('ue_gesamt_count', models.PositiveIntegerField(default=0)),
                ('ue_feedbackpreis', models.FloatField(blank=True, null=True)),
                ('ue_feedbackpreis_count', models.PositiveIntegerField(default=0)),
                ('gesamt', models.FloatField(blank=True, null=True)),
                ('gesamt_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['veranstaltung'],
                'verbose_name': 'Ergebnis 2012',
                'verbose_name_plural': 'Ergebnisse 2012',
            },
        ),
        migrations.CreateModel(
            name='Ergebnis2016',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anzahl', models.PositiveIntegerField()),
                ('v_didaktik', models.FloatField(blank=True, null=True)),
                ('v_didaktik_count', models.PositiveIntegerField(default=0)),
                ('v_organisation', models.FloatField(blank=True, null=True)),
                ('v_organisation_count', models.PositiveIntegerField(default=0)),
                ('v_praxisbezug_motivation', models.FloatField(blank=True, null=True)),
                ('v_praxisbezug_motivation_count', models.PositiveIntegerField(default=0)),
                ('v_6_5', models.FloatField(blank=True, null=True)),
                ('v_6_5_count', models.PositiveIntegerField(default=0)),
                ('v_feedbackpreis', models.FloatField(blank=True, null=True)),
                ('v_feedbackpreis_count', models.PositiveIntegerField(default=0)),
                ('gesamt', models.FloatField(blank=True, null=True)),
                ('gesamt_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['veranstaltung'],
                'verbose_name': 'Ergebnis 2016',
                'verbose_name_plural': 'Ergebnisse 2016',
            },
        ),
        migrations.CreateModel(
            name='Fragebogen2008',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fach', models.CharField(blank=True, choices=[(b'inf', b'Informatik'), (b'math', b'Mathematik'), (b'ce', b'Computational Engineering'), (b'ist', b'Informationssystemtechnik'), (b'etit', b'Elektrotechnik'), (b'psyit', b'Psychologie in IT'), (b'winf', b'Wirtschaftsinformatik'), (b'sonst', b'etwas anderes')], max_length=5)),
                ('abschluss', models.CharField(blank=True, choices=[(b'bsc', b'Bachelor'), (b'msc', b'Master'), (b'dipl', b'Diplom'), (b'lehr', b'Lehramt'), (b'sonst', b'anderer Abschluss')], max_length=5)),
                ('semester', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_wie_oft_besucht', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_besuch_ueberschneidung', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_verhaeltnisse', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_qualitaet', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_privat', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_sonstiges', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_a', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_b', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_c', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_d', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_e', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_f', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_f2', models.CharField(blank=True, choices=[(b's', b'zu schnell'), (b'l', b'zu langsam')], max_length=1)),
                ('v_g', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_h', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_i', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_j', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_k', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_l', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_m', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_gesamt', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_wie_oft_besucht', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_besuch_ueberschneidung', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_verhaeltnisse', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_qualitaet', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_privat', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_sonstiges', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_a', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_b', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_c', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_d', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_e', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_f', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_g', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_h', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_i', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_i2', models.CharField(blank=True, choices=[(b'h', b'zu hoch'), (b'n', b'zu niedrig')], max_length=1)),
                ('ue_j', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_gesamt', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('zusaetzliche_zeit', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('vorwissen_aussreichend', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('empfehlung', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
            ],
            options={
                'ordering': ['semester', 'veranstaltung'],
                'verbose_name': 'Fragebogen 2008',
                'verbose_name_plural': 'Frageb\xf6gen 2008',
            },
        ),
        migrations.CreateModel(
            name='Fragebogen2009',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fach', models.CharField(blank=True, choices=[(b'inf', b'Informatik'), (b'math', b'Mathematik'), (b'ce', b'Computational Engineering'), (b'ist', b'Informationssystemtechnik'), (b'etit', b'Elektrotechnik'), (b'psyit', b'Psychologie in IT'), (b'winf', b'Wirtschaftsinformatik'), (b'sonst', b'etwas anderes')], max_length=5)),
                ('abschluss', models.CharField(blank=True, choices=[(b'bsc', b'Bachelor'), (b'msc', b'Master'), (b'dipl', b'Diplom'), (b'lehr', b'Lehramt'), (b'sonst', b'anderer Abschluss')], max_length=5)),
                ('semester', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_wie_oft_besucht', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_besuch_ueberschneidung', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_verhaeltnisse', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_qualitaet', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_privat', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_sonstiges', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_a', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_b', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_c', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_d', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_e', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_f', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_f2', models.CharField(blank=True, choices=[(b's', b'zu schnell'), (b'l', b'zu langsam')], max_length=1)),
                ('v_g', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_h', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_i', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_j', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_k', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_l', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_gesamt', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_wie_oft_besucht', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_besuch_ueberschneidung', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_verhaeltnisse', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_qualitaet', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_privat', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_sonstiges', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_a', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_b', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_c', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_d', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_e', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_f', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_g', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_h', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_i', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_i2', models.CharField(blank=True, choices=[(b'h', b'zu hoch'), (b'n', b'zu niedrig')], max_length=1)),
                ('ue_j', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_k', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_gesamt', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('zusaetzliche_zeit', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('vorwissen_aussreichend', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('empfehlung', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['semester', 'veranstaltung'],
                'verbose_name': 'Fragebogen 2009',
                'verbose_name_plural': 'Frageb\xf6gen 2009',
            },
        ),
        migrations.CreateModel(
            name='Fragebogen2012',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fach', models.CharField(blank=True, choices=[(b'inf', b'Informatik'), (b'math', b'Mathematik'), (b'ce', b'Computational Engineering'), (b'ist', b'Informationssystemtechnik'), (b'etit', b'Elektrotechnik'), (b'psyit', b'Psychologie in IT'), (b'winf', b'Wirtschaftsinformatik'), (b'sonst', b'etwas anderes')], max_length=5)),
                ('abschluss', models.CharField(blank=True, choices=[(b'bsc', b'Bachelor'), (b'msc', b'Master'), (b'dipl', b'Diplom'), (b'lehr', b'Lehramt'), (b'sonst', b'anderer Abschluss')], max_length=5)),
                ('semester', models.CharField(blank=True, choices=[(b'1-2', b'1-2'), (b'3-4', b'3-4'), (b'5-6', b'5-6'), (b'>=7', b'>=7')], max_length=3)),
                ('geschlecht', models.CharField(blank=True, choices=[(b'w', b'weiblich'), (b'm', b'm\xc3\xa4nnlich'), (b's', b'sonstiges')], max_length=1)),
                ('studienberechtigung', models.CharField(blank=True, choices=[(b'd', b'Deutschland'), (b'o', b'anderes Land')], max_length=1)),
                ('v_wie_oft_besucht', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_besuch_ueberschneidung', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_qualitaet', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_verhaeltnisse', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_privat', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_sonstiges', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_4', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_5', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_6', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_7', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_8', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_9', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_10', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_10a', models.CharField(blank=True, choices=[(b's', b'zu schnell'), (b'l', b'zu langsam')], max_length=1)),
                ('v_11', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_12', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_13', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_14', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_15', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_16', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_gesamt', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_wie_oft_besucht', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_besuch_ueberschneidung', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_qualitaet', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_verhaeltnisse', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_privat', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_besuch_sonstiges', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('ue_4', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_5', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_6', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_7', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_8', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_9', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_10', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_11', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_12', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_13', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_13a', models.CharField(blank=True, choices=[(b'h', b'zu hoch'), (b'n', b'zu niedrig')], max_length=1)),
                ('ue_14', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_15', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('ue_gesamt', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('zusaetzliche_zeit', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('vorwissen_aussreichend', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('empfehlung', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('gesamt', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['semester', 'veranstaltung'],
                'verbose_name': 'Fragebogen 2012',
                'verbose_name_plural': 'Frageb\xf6gen 2012',
            },
        ),
        migrations.CreateModel(
            name='Fragebogen2016',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fach', models.CharField(blank=True, choices=[(b'inf', b'Informatik'), (b'math', b'Mathematik'), (b'ce', b'Computational Engineering'), (b'ist', b'Informationssystemtechnik'), (b'etit', b'Elektrotechnik'), (b'psyit', b'Psychologie in IT'), (b'winf', b'Wirtschaftsinformatik'), (b'sonst', b'etwas anderes')], max_length=5)),
                ('abschluss', models.CharField(blank=True, choices=[(b'bsc', b'Bachelor'), (b'msc', b'Master'), (b'dipl', b'Diplom'), (b'lehr', b'Lehramt'), (b'sonst', b'anderer Abschluss')], max_length=5)),
                ('semester', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4'), (b'5', b'5'), (b'6', b'6'), (b'7', b'7'), (b'8', b'8'), (b'9', b'9'), (b'10', b'>=10')], max_length=4)),
                ('geschlecht', models.CharField(blank=True, choices=[(b'w', b'weiblich'), (b'm', b'm\xc3\xa4nnlich'), (b's', b'sonstiges')], max_length=1)),
                ('studienberechtigung', models.CharField(blank=True, choices=[(b'd', b'Deutschland'), (b'o', b'anderes Land')], max_length=1)),
                ('pflichveranstaltung', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('male_veranstaltung_gehoert', models.CharField(blank=True, choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'<=4')], max_length=1)),
                ('pruefung_angetreten', models.CharField(blank=True, choices=[(b'0', b'0'), (b'1', b'1'), (b'2', b'2')], max_length=1)),
                ('v_wie_oft_besucht', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_besuch_ueberschneidung', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_qualitaet', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_verhaeltnisse', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_privat', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_elearning', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_zufrueh', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_besuch_sonstiges', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
                ('v_3_1', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_2', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_3', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_4', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_5', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_6', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_7', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_8', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_9', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_10', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_11', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_12', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_3_13', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_4_1', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_4_2', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_4_3', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_4_4', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_4_5', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_4_6', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_4_7', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_4_8', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_4_9', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_5_1', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_5_2', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_6_1', models.CharField(blank=True, choices=[(b'0', b'0'), (b'1', b'0.5'), (b'2', b'1'), (b'3', b'2'), (b'4', b'3'), (b'5', b'4'), (b'6', b'5'), (b'7', b'>=5')], max_length=1)),
                ('v_6_2', models.CharField(blank=True, max_length=3)),
                ('v_6_3', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_6_4', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_6_5', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('v_6_8', models.CharField(blank=True, choices=[(b'j', b'ja'), (b'n', b'nein')], max_length=1)),
            ],
            options={
                'ordering': ['semester', 'veranstaltung'],
                'verbose_name': 'Fragebogen 2016',
                'verbose_name_plural': 'Frageb\xf6gen 2016',
            },
        ),
        migrations.CreateModel(
            name='ImportCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='feedback.ImportCategory')),
            ],
            options={
                'verbose_name': 'Importierte Kategorie',
                'verbose_name_plural': 'Importierte Kategorien',
            },
        ),
        migrations.CreateModel(
            name='ImportPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vorname', models.CharField(max_length=30)),
                ('nachname', models.CharField(max_length=30)),
            ],
            options={
                'verbose_name': 'Importierte Person',
                'verbose_name_plural': 'Importierte Personen',
            },
        ),
        migrations.CreateModel(
            name='ImportVeranstaltung',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typ', models.CharField(choices=[('v', 'Vorlesung'), ('vu', 'Vorlesung mit \xdcbung'), ('pr', 'Praktikum'), ('se', 'Seminar')], max_length=1)),
                ('name', models.CharField(max_length=150)),
                ('lv_nr', models.CharField(blank=True, max_length=15)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.ImportCategory')),
                ('veranstalter', models.ManyToManyField(blank=True, null=True, to='feedback.ImportPerson')),
            ],
            options={
                'verbose_name': 'Importierte Veranstaltung',
                'verbose_name_plural': 'Importierte Veranstaltungen',
            },
        ),
        migrations.CreateModel(
            name='Kommentar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
            ],
            options={
                'verbose_name': 'Kommentar',
                'verbose_name_plural': 'Kommentare',
            },
        ),
        migrations.CreateModel(
            name='Mailvorlage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=100, unique=True)),
                ('body', models.TextField()),
            ],
            options={
                'ordering': ['subject'],
                'verbose_name': 'Mailvorlage',
                'verbose_name_plural': 'Mailvorlagen',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geschlecht', models.CharField(blank=True, choices=[('', ''), ('m', 'Herr'), ('w', 'Frau')], max_length=1, verbose_name='Anrede')),
                ('vorname', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('nachname', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='e-mail address')),
                ('anschrift', models.CharField(blank=True, help_text='Bitte geben sie die Anschrift so an, dass der Versand per Hauspost problemlos erfolgen kann.', max_length=80, verbose_name='anschrift')),
                ('fachgebiet', models.CharField(blank=True, max_length=80, verbose_name='Fachgebiet')),
            ],
            options={
                'ordering': ('nachname', 'vorname'),
                'verbose_name': 'Person',
                'verbose_name_plural': 'Personen',
            },
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.IntegerField(help_text='Aufbau: YYYYS, wobei YYYY = Jahreszahl und S = Semester (0=SS, 5=WS).', unique=True)),
                ('fragebogen', models.CharField(choices=[('2008', 'Fragebogen 2008'), ('2009', 'Fragebogen 2009'), ('2012', 'Fragebogen 2012'), ('2016', 'Fragebogen 2016')], help_text='Verwendete Version des Fragebogens.', max_length=5)),
                ('sichtbarkeit', models.CharField(choices=[('ADM', 'Administratoren'), ('VER', 'Veranstalter'), ('ALL', 'alle (\xf6ffentlich)')], help_text='Sichtbarkeit der Evaluationsergebnisse.<br /><em>Administratoren:</em> nur f\xfcr Mitglieder des Feedback-Teams<br /><em>Veranstalter:</em> Veranstalter und Mitglieder des Feedback-Teams<br /><em>alle (\xf6ffentlich):</em> alle (beschr\xe4nkt auf das Uninetz)<br />', max_length=3)),
                ('vollerhebung', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-semester'],
                'verbose_name': 'Semester',
                'verbose_name_plural': 'Semester',
            },
        ),
        migrations.CreateModel(
            name='Tutor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nummer', models.PositiveSmallIntegerField()),
                ('vorname', models.CharField(max_length=30, verbose_name='first name')),
                ('nachname', models.CharField(max_length=30, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, verbose_name='e-mail address')),
                ('anmerkung', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Tutor',
                'verbose_name_plural': 'Tutoren',
            },
        ),
        migrations.CreateModel(
            name='Veranstaltung',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typ', models.CharField(choices=[('v', 'Vorlesung'), ('vu', 'Vorlesung mit \xdcbung'), ('pr', 'Praktikum'), ('se', 'Seminar')], help_text='Wenn Ihre Vorlesung keine \xdcbung hat w\xe4hlen Sie bitte <i>Vorlesung</i> aus', max_length=2)),
                ('name', models.CharField(max_length=150)),
                ('lv_nr', models.CharField(blank=True, max_length=15, verbose_name='LV-Nummer')),
                ('grundstudium', models.BooleanField()),
                ('evaluieren', models.BooleanField()),
                ('sprache', models.CharField(blank=True, choices=[('de', 'Deutsch'), ('en', 'Englisch')], max_length=2, null=True)),
                ('anzahl', models.IntegerField(blank=True, null=True)),
                ('auswertungstermin', models.DateField(blank=True, help_text='An welchem Tag sollen Frageb\xf6gen f\xfcr diese Veranstaltung ausgewerter werden? Frageb\xf6gen die danach eintreffen werden nicht mehr ausgewertet.', null=True, verbose_name='Auswertungstermin')),
                ('bestelldatum', models.DateField(blank=True, null=True)),
                ('access_token', models.CharField(blank=True, max_length=16)),
                ('freiefrage1', models.TextField(blank=True, verbose_name='1. Freie Frage')),
                ('freiefrage2', models.TextField(blank=True, verbose_name='2. Freie Frage')),
                ('kleingruppen', models.TextField(blank=True, verbose_name='Kleingruppen')),
                ('ergebnis_empfaenger', models.ManyToManyField(blank=True, help_text='An diese Personen werden die Ergebnisse per E-Mail geschickt.', null=True, related_name='ergebnis_empfaenger', to='feedback.Person', verbose_name='Empf\xe4nger der Ergebnisse')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Semester')),
                ('veranstalter', models.ManyToManyField(blank=True, help_text='Alle Personen, die mit der Veranstaltung befasst sind und z.B. Frageb\xf6gen bestellen k\xf6nnen sollen.', null=True, to='feedback.Person')),
                ('verantwortlich', models.ForeignKey(blank=True, help_text='Diese Person wird von uns bei R\xfcckfragen kontaktiert und bekommt die Fragenb\xf6gen zugeschickt', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='verantwortlich', to='feedback.Person')),
            ],
            options={
                'ordering': ['semester', 'typ', 'name'],
                'verbose_name': 'Veranstaltung',
                'verbose_name_plural': 'Veranstaltungen',
            },
        ),
        migrations.AddField(
            model_name='tutor',
            name='veranstaltung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung'),
        ),
        migrations.AddField(
            model_name='kommentar',
            name='autor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Person'),
        ),
        migrations.AddField(
            model_name='kommentar',
            name='veranstaltung',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung'),
        ),
        migrations.AddField(
            model_name='fragebogen2016',
            name='veranstaltung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung'),
        ),
        migrations.AddField(
            model_name='fragebogen2012',
            name='veranstaltung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung'),
        ),
        migrations.AddField(
            model_name='fragebogen2009',
            name='veranstaltung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung'),
        ),
        migrations.AddField(
            model_name='fragebogen2008',
            name='veranstaltung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung'),
        ),
        migrations.AddField(
            model_name='ergebnis2016',
            name='veranstaltung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung', unique=True),
        ),
        migrations.AddField(
            model_name='ergebnis2012',
            name='veranstaltung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung', unique=True),
        ),
        migrations.AddField(
            model_name='ergebnis2009',
            name='veranstaltung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung', unique=True),
        ),
        migrations.AddField(
            model_name='ergebnis2008',
            name='veranstaltung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung', unique=True),
        ),
        migrations.AddField(
            model_name='barcodescannevent',
            name='tutorgroup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='feedback.Tutor'),
        ),
        migrations.AddField(
            model_name='barcodescannevent',
            name='veranstaltung',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='feedback.Veranstaltung'),
        ),
        migrations.AlterUniqueTogether(
            name='veranstaltung',
            unique_together=set([('name', 'lv_nr', 'semester')]),
        ),
        migrations.AlterUniqueTogether(
            name='tutor',
            unique_together=set([('nummer', 'veranstaltung')]),
        ),
        migrations.AlterUniqueTogether(
            name='importveranstaltung',
            unique_together=set([('name', 'lv_nr', 'category')]),
        ),
        migrations.AlterUniqueTogether(
            name='importcategory',
            unique_together=set([('parent', 'name')]),
        ),
    ]
